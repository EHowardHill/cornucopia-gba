const int l_tunnel[135] = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1,
    1, 6, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 7, 9, 0, -3, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int l_easy[135] = {
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1};

const int l_easy2[135] = {
    1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
    1, 0, 0, 0, 1, -2, 0, 0, 0, 0, -2, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 10, 12, 0, 10, 12, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 11, 13, 0, 11, 13, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 2, 4, 0, 0, 0, 10, 12, 0, 0, 10, 12, 0, 0, 1,
    1, 3, 5, 0, 0, 0, 11, 13, 0, 0, 11, 13, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1};

const int l_shaft[135] = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 0, -1, 1,
    1, 10, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 11, 13, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1,
    1, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, -2, 0, 0, 0, 0, 0, 0, -2, 0, 0, -1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int l_holeymoley[135] = {
    1, 1, 1, 1, -1, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    -1, 0, 0, 0, 1, 0, 0, 0, 0, -2, 0, 0, 0, 0, -1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, -1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1,
    1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1};

const int l_tricky[135] = {
    1, 1, 1, -1, 0, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 12, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 13, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, -2, 0, 0, -1, 1, 0, 0, -2, 0, 0, -2, 0, 0, 1,
    1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 1, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1};

const int l_tables[135] = {
    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    1, 0, 1, -1, 0, -1, -1, -1, 0, 0, 0, 0, 0, 0, 1,
    1, 10, 12, -1, -1, 10, 12, -1, 0, 0, 0, 0, 0, 0, 1,
    1, 11, 13, 10, 12, 11, 13, -2, -1, -1, 0, 0, 0, 0, 1,
    1, -1, -1, 11, 13, -1, -1, 10, 12, -1, 0, 0, 0, 0, 1,
    1, 0, 0, -1, -1, -1, -1, 11, 13, -1, 0, 0, 0, 0, 1,
    1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1,
    1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1, 1};

#define TOTAL_LEVELS 7

// Custom classes
class Room
{
public:
    int map[135] = {0};
    int start_x = 0;
    int start_y = 0;
    bool default_gravity = false;
    int intro_monologue = 0;
    int intro_monologue_pos = 0;
    void const *resolve_level;

    void setup(int current_level)
    {
        switch (current_level)
        {
        default:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            intro_monologue = 1;
            resolve_level = l_tunnel;
            break;
        }
        case 1:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_easy;
            break;
        }
        case 2:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_easy2;
            break;
        }
        case 3:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_holeymoley;
            break;
        }
        case 4:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_shaft;
            break;
        }
        case 5:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_tricky;
            break;
        }
        case 6:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_tables;
            break;
        }
        case 7:
        {
            start_x = encode_x(8);
            start_y = encode_y(7);
            resolve_level = l_tables;
            break;
        }
        }
        bn::memcpy(map, resolve_level, sizeof(map));
    }
};